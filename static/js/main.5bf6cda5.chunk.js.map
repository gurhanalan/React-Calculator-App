{"version":3,"sources":["components/NumberButton.jsx","components/OperantButton.jsx","Reducer.js","App.js","index.js"],"names":["NumberButton","number","dispatch","onClick","type","payload","className","OperantButton","operant","reducer","state","currDisplay","includes","newDisplay","newDisplay2","slice","prevDisplay","result","evaluate","result2","Error","parseFloat","toString","initialState","numberFormatter","stringNumber","length","integer","decimal","split","String","Intl","NumberFormat","style","format","join","App","useReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bf6cda5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NumberButton = ({ number, dispatch }) => {\r\n    return (\r\n        <button\r\n            onClick={() => dispatch({ type: \"ADD_DIGIT\", payload: number })}\r\n            className=\"number-btn\"\r\n        >\r\n            {number}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default NumberButton;\r\n","import React from \"react\";\r\n\r\nconst OperantButton = ({ operant, className, dispatch, type }) => {\r\n    return (\r\n        <button\r\n            className={`${className ? className : \"\"} operant-btn`}\r\n            onClick={() => {\r\n                dispatch({ type, payload: operant });\r\n            }}\r\n        >\r\n            {operant}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default OperantButton;\r\n","export const reducer = (state, { type, payload }) => {\r\n    switch (type) {\r\n        case \"ADD_DIGIT\":\r\n            if (payload === \".\" && state.currDisplay.includes(\".\")) {\r\n                return { ...state };\r\n            } else if (\r\n                state.currDisplay[0] === \"0\" &&\r\n                payload !== \".\" &&\r\n                !state.currDisplay[1]\r\n            ) {\r\n                return { ...state };\r\n            }\r\n            let newDisplay = state.currDisplay + payload;\r\n            return { ...state, currDisplay: newDisplay };\r\n        case \"DELETE_DIGIT\":\r\n            let newDisplay2 = state.currDisplay.slice(0, -1);\r\n            return { ...state, currDisplay: newDisplay2 };\r\n        case \"CLEAR_ALL\":\r\n            return { ...state, currDisplay: \"\", prevDisplay: \"\", operant: \"\" };\r\n\r\n        case \"OPERANT\":\r\n            if (!state.currDisplay && state.prevDisplay) {\r\n                return { ...state, operant: payload };\r\n            } else if (!state.operant) {\r\n                return {\r\n                    ...state,\r\n                    prevDisplay: state.currDisplay,\r\n                    currDisplay: \"\",\r\n                    operant: payload,\r\n                };\r\n            }\r\n            let result = evaluate();\r\n\r\n            return {\r\n                ...state,\r\n                currDisplay: \"\",\r\n                prevDisplay: result,\r\n                operant: payload,\r\n            };\r\n        case \"EVALUATE\":\r\n            if (!state.operant || !state.currDisplay || !state.prevDisplay) {\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n            let result2 = evaluate();\r\n\r\n            return {\r\n                ...state,\r\n                currDisplay: \"\",\r\n                prevDisplay: result2,\r\n                operant: \"\",\r\n            };\r\n        default:\r\n            throw new Error();\r\n    }\r\n\r\n    function evaluate() {\r\n        let result;\r\n        switch (state.operant) {\r\n            case \"/\":\r\n                result =\r\n                    parseFloat(state.prevDisplay) /\r\n                    parseFloat(state.currDisplay);\r\n                break;\r\n            case \"*\":\r\n                result =\r\n                    parseFloat(state.prevDisplay) *\r\n                    parseFloat(state.currDisplay);\r\n                break;\r\n            case \"+\":\r\n                result =\r\n                    parseFloat(state.prevDisplay) +\r\n                    parseFloat(state.currDisplay);\r\n                break;\r\n            case \"-\":\r\n                result =\r\n                    parseFloat(state.prevDisplay) -\r\n                    parseFloat(state.currDisplay);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return result.toString();\r\n    }\r\n};\r\n\r\nexport const initialState = {\r\n    prevDisplay: \"\",\r\n    currDisplay: \"\",\r\n    operant: \"\",\r\n};\r\n\r\n","import NumberButton from \"./components/NumberButton\";\nimport OperantButton from \"./components/OperantButton\";\nimport { useReducer } from \"react\";\nimport { reducer, initialState } from \"./Reducer\";\n\nconst numberFormatter = (stringNumber) => {\n    if (stringNumber.length === 0) {\n        return \"\";\n    }\n    let integer, decimal;\n    if (stringNumber.includes(\".\")) {\n        [integer, decimal] = stringNumber.split(\".\");\n    } else {\n        integer = stringNumber;\n    }\n\n    integer = String(\n        new Intl.NumberFormat(\"en-US\", {\n            style: \"decimal\",\n        }).format(integer)\n    );\n    if (decimal) {\n        return [integer, decimal].join(\".\");\n    }\n\n    return integer;\n};\n\n// console.log(numberFormatter(\"233333333.44555\"));\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <main>\n            <div className=\"calculator\">\n                <div className=\"display\">\n                    <div className=\"prev-diplay\">{`${numberFormatter(\n                        state.prevDisplay\n                    )} ${state.operant}`}</div>\n                    <div className=\"current-display\">\n                        {numberFormatter(state.currDisplay)}\n                    </div>\n                </div>\n                <OperantButton\n                    operant=\"AC\"\n                    className=\"span2\"\n                    dispatch={dispatch}\n                    type=\"CLEAR_ALL\"\n                />\n                <OperantButton\n                    operant=\"DEL\"\n                    dispatch={dispatch}\n                    type=\"DELETE_DIGIT\"\n                />\n                <OperantButton operant=\"/\" dispatch={dispatch} type=\"OPERANT\" />\n                <NumberButton number=\"1\" dispatch={dispatch} />\n                <NumberButton number=\"2\" dispatch={dispatch} />\n                <NumberButton number=\"3\" dispatch={dispatch} />\n                <OperantButton operant=\"*\" dispatch={dispatch} type=\"OPERANT\" />\n\n                <NumberButton number=\"4\" dispatch={dispatch} />\n                <NumberButton number=\"5\" dispatch={dispatch} />\n                <NumberButton number=\"6\" dispatch={dispatch} />\n                <OperantButton operant=\"+\" dispatch={dispatch} type=\"OPERANT\" />\n\n                <NumberButton number=\"7\" dispatch={dispatch} />\n                <NumberButton number=\"8\" dispatch={dispatch} />\n                <NumberButton number=\"9\" dispatch={dispatch} />\n                <OperantButton operant=\"-\" dispatch={dispatch} type=\"OPERANT\" />\n\n                <NumberButton number=\".\" dispatch={dispatch} />\n                <NumberButton number=\"0\" dispatch={dispatch} />\n                <OperantButton\n                    operant=\"=\"\n                    className=\"span2\"\n                    dispatch={dispatch}\n                    type=\"EVALUATE\"\n                />\n            </div>\n        </main>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}